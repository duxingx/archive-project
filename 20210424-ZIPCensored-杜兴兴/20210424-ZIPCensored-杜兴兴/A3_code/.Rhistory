x = cbind(x1,x2)
yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
else if(method == "two_unifnorm"){
x1 = runif(ns[k]);x2 = rnorm(ns[k]);
x = cbind(x1,x2)
yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
else{return(print("请输入指定方法的字符串"))}
y = pmin(cut, yy)
rcensored = (y >= cut)
status = ifelse(rcensored, 0, 1)
data1[l,k,i] = sum(yy>=cut)
try(wald_lr_result <- wald_lr(y,x=x,cut=cut))
try(waldp1[l,k,i] <- wald_lr_result$wald)
try(lrp1[l,k,i] <- wald_lr_result$lr)
try(scorep1[l,k,i] <- score(y,cut=cut,x=x))
try(ssp1[l,k,i] <- snew(y,cut=cut,x=x))
try(wald_conv[l,k,i] <- wald_lr_result$conv)
try(wald_wrhop[l,k,i] <- wald_lr_result$wrhop)
print(paste("current simulation:",mu_alpha[i],ns[k],l,
"  he:",round(ssp1[l,k,i],3),
"  score:",round(scorep1[l,k,i],3),
"  wald:",round(waldp1[l,k,i],3),
"  lr:",round(lrp1[l,k,i],3)));
}
}
}
print(Sys.time() - start_time)
return(list(data1=data1,
wald=waldp1,lr=lrp1,score=scorep1,
snew=ssp1,
wald_conv=wald_conv,wald_wrhop=wald_wrhop))
}
type1error_data_func(mu=0.5,aa=NULL,bb=1.45,beta2=1,ns=500,nsim=200,cut=4,method=NULL)
library(stats4)
library(splines)
library(VGAM)
loglikelihood  <-function(theta, y, x=NULL,cut=15){
if (is.null(x)){
xmatrix=matrix(1,nrow=length(y),ncol=1);
}else  {xmatrix=cbind(1,x);}
rho=theta[1];
beta=theta[-1];
pred=exp(xmatrix %*% beta);
like=(y<cut)*((y==0)*log((rho+(1-rho)*exp(-pred)))+(y>0)*log((1-rho)*dpois(y,pred)))+
(y>=cut)*log((1-rho)*ppois(cut-1,pred,lower.tail = F))
llike = sum(like)
return(llike);
}
likelihoodp<-function(theta,y,x=NULL,cut=15){
if (is.null(x)){
xmatrix=matrix(1,nrow=length(y),ncol=1);
}else  {xmatrix=cbind(1,x);}
beta=theta   # 修改：需要截距
pred=exp(xmatrix %*% beta);
rho=0;
like=(y<cut)*((y==0)*log((rho+(1-rho)*exp(-pred)))+(y>0)*log((1-rho)*dpois(y,pred)))+
(y>=cut)*log((1-rho)*ppois(cut-1,pred,lower.tail = F))
llike = sum(like)
return(llike);
}
# lp(coef(a),y,x,cut=4)
wald_lr<-function(y, x=NULL,cut=15){
test<-NULL;
n<-length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
zz0<-optim(coef(a), likelihoodp,hessian=T,y=y,cut=cut,control=list(fnscale=-1));
zz<-optim( c(0, zz0$par), loglikelihood,hessian=T,y=y,cut=cut,control=list(fnscale=-1));
}else {
a <- glm(y~x,family="poisson")
zz0<-optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
zz<-optim( c(0, zz0$par), loglikelihood,hessian=T, y=y,x=x,cut=cut,control=list(fnscale=-1));
}
aa<-zz$par;
test$conv = zz$convergence;
test$wrhop = zz$par[1];
if(det(zz$hessian)!=0){
OI<-solve(-zz$hessian,tol = 1e-40);
se<-sqrt(diag(OI));
test$wald <- as.numeric(aa[1]/se[1]);
test$lr <- as.numeric(2*zz$value-2*zz0$value);
}
return(test);
}
#
x = runif(200);yy = rzipois(200,exp(0.5-x), pstr0 = 0.5)
cut=4
y = pmin(cut, yy)
wald_lr(y,x=x,cut=cut)
score<- function(y,x=NULL,cut=15) {
n=length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,   y=y,cut=cut,control=list(fnscale=-1));
cov=matrix(rep(1,n),ncol=1);
} else {
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
}
beta=coef(ex);
p=length(beta);
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)= (y<cut)*(-mu*ri+(1-ri)*(y-mu))+(y>=cut)*mu*dpois(cut-1,mu)/ci
uWT1=t(cov)%*%dU;
uWT2=-1+ri*(y<cut)/pi;
L11=uWT1%*%t(uWT1);
L12=uWT1%*%(uWT2)
L21=t(L12)
L22=t(uWT2)%*%(uWT2)
LL=rbind(cbind(L11,L12),cbind(L21,L22));
score<-sum(-1+ri*(y<cut)/pi)*sqrt(solve(LL)[p+1,p+1]);
return(score);
}
snew<- function(y,status,x=NULL,cut=15) {
n=length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,   y=y,cut=cut,control=list(fnscale=-1));
cov=matrix(rep(1,n),ncol=1);
} else {
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
}
beta=coef(ex);
p=length(beta);
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)=(y<cut)*(y-mu)+(y>=cut)*mu*dpois(cut-1,mu)/ci;
uWT1=ri-pi;
uWT2=t(cov)%*%dU;
A11=-n;
A12=t(uWT1)%*%t(uWT2);
A21=matrix(rep(0,p),ncol=1);
A22=uWT2%*%t(uWT2);
AA=rbind(cbind(A11,-A12),cbind(A21,-A22));
A=AA/n;
B11=t(uWT1)%*%uWT1;
B12=t(uWT1)%*%t(uWT2);
B22=uWT2%*%t(uWT2);
B21=t(B12);
BB=rbind(cbind(B11,B12),cbind(B21,B22));
B=BB/n;
TT=solve(A)%*%B%*%t(solve(A));
snew<-(sqrt(n)*mean(ri-pi))/sqrt((TT)[1,1]);
return(snew);
}
## 函数用来生成Type1Error的数据，返回的是list
type1error_data_func <- function(mu=NULL,aa=NULL,bb=1.45,beta2=1,ns,nsim,cut=5,method=NULL){
start_time = Sys.time()
if(is.null(mu)){mu_alpha=aa;
}else {mu_alpha=mu;}
waldp1=lrp1=scorep1=ssp1=wald_wrhop=wald_conv=data1=array(dim=c(nsim, length(ns),length(mu_alpha)));
for(i in 1:length(mu_alpha)){
for(k in 1:length(ns)){
for(l in 1:nsim){
x=NULL
if(is.null(method)){yy = rpois(ns[k],exp(mu_alpha[i]))}
else if(method == "unif"){x = runif(ns[k]);yy = rpois(ns[k],exp(mu_alpha[i]-bb*x))}
else if(method =="norm"){x = rnorm(ns[k]);yy = rpois(ns[k],exp(mu_alpha[i]-bb*x))}
else if(method == "two_norm"){
x1 = rnorm(ns[k]);x2 = rnorm(ns[k]);
x = cbind(x1,x2)
yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
else if(method == "two_unif"){
x1 = runif(ns[k]);x2 = runif(ns[k]);
x = cbind(x1,x2)
yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
else if(method == "two_unifnorm"){
x1 = runif(ns[k]);x2 = rnorm(ns[k]);
x = cbind(x1,x2)
yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
else{return(print("请输入指定方法的字符串"))}
y = pmin(cut, yy)
rcensored = (y >= cut)
status = ifelse(rcensored, 0, 1)
data1[l,k,i] = sum(yy>=cut)
try(wald_lr_result <- wald_lr(y,x=x,cut=cut))
try(waldp1[l,k,i] <- wald_lr_result$wald)
try(lrp1[l,k,i] <- wald_lr_result$lr)
try(scorep1[l,k,i] <- score(y,cut=cut,x=x))
try(ssp1[l,k,i] <- snew(y,cut=cut,x=x))
try(wald_conv[l,k,i] <- wald_lr_result$conv)
try(wald_wrhop[l,k,i] <- wald_lr_result$wrhop)
print(paste("current simulation:",mu_alpha[i],ns[k],l,
"  he:",round(ssp1[l,k,i],3),
"  score:",round(scorep1[l,k,i],3),
"  wald:",round(waldp1[l,k,i],3),
"  lr:",round(lrp1[l,k,i],3)));
}
}
}
print(Sys.time() - start_time)
return(list(data1=data1,
wald=waldp1,lr=lrp1,score=scorep1,
snew=ssp1,
wald_conv=wald_conv,wald_wrhop=wald_wrhop))
}
type1error_data_func(mu=0.5,aa=NULL,bb=1.45,beta2=1,ns=500,nsim=200,cut=4,method=NULL)
#
x = runif(200);yy = rzipois(200,exp(0.5-x), pstr0 = 0.5)
cut=4
y = pmin(cut, yy)
wald_lr(y,x=x,cut=cut)
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
ex
beta=coef(ex);
p=length(beta);
mu= exp(cov %*% beta );
beta
coef(ex)
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
ex
coef(ex)
ex
beta=coef(a);
p=length(beta);
p
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)= (y<cut)*(-mu*ri+(1-ri)*(y-mu))+(y>=cut)*mu*dpois(cut-1,mu)/ci
n=length(y);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)=(y<cut)*(y-mu)+(y>=cut)*mu*dpois(cut-1,mu)/ci;
uWT1=ri-pi;
uWT2=t(cov)%*%dU;
A11=-n;
A12=t(uWT1)%*%t(uWT2);
A21=matrix(rep(0,p),ncol=1);
library(stats4)
library(splines)
library(VGAM)
loglikelihood  <-function(theta, y, x=NULL,cut=15){
if (is.null(x)){
xmatrix=matrix(1,nrow=length(y),ncol=1);
}else  {xmatrix=cbind(1,x);}
rho=theta[1];
beta=theta[-1];
pred=exp(xmatrix %*% beta);
like=(y<cut)*((y==0)*log((rho+(1-rho)*exp(-pred)))+(y>0)*log((1-rho)*dpois(y,pred)))+
(y>=cut)*log((1-rho)*ppois(cut-1,pred,lower.tail = F))
llike = sum(like)
return(llike);
}
likelihoodp<-function(theta,y,x=NULL,cut=15){
if (is.null(x)){
xmatrix=matrix(1,nrow=length(y),ncol=1);
}else  {xmatrix=cbind(1,x);}
beta=theta   # 修改：需要截距
pred=exp(xmatrix %*% beta);
rho=0;
like=(y<cut)*((y==0)*log((rho+(1-rho)*exp(-pred)))+(y>0)*log((1-rho)*dpois(y,pred)))+
(y>=cut)*log((1-rho)*ppois(cut-1,pred,lower.tail = F))
llike = sum(like)
return(llike);
}
# lp(coef(a),y,x,cut=4)
wald_lr<-function(y, x=NULL,cut=15){
test<-NULL;
n<-length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
zz0<-optim(coef(a), likelihoodp,hessian=T,y=y,cut=cut,control=list(fnscale=-1));
zz<-optim( c(0, zz0$par), loglikelihood,hessian=T,y=y,cut=cut,control=list(fnscale=-1));
}else {
a <- glm(y~x,family="poisson")
zz0<-optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
zz<-optim( c(0, zz0$par), loglikelihood,hessian=T, y=y,x=x,cut=cut,control=list(fnscale=-1));
}
aa<-zz$par;
test$conv = zz$convergence;
test$wrhop = zz$par[1];
if(det(zz$hessian)!=0){
OI<-solve(-zz$hessian,tol = 1e-40);
se<-sqrt(diag(OI));
test$wald <- as.numeric(aa[1]/se[1]);
test$lr <- as.numeric(2*zz$value-2*zz0$value);
}
return(test);
}
#
x = runif(200);yy = rzipois(200,exp(0.5-x), pstr0 = 0.5)
cut=4
y = pmin(cut, yy)
wald_lr(y,x=x,cut=cut)
score<- function(y,x=NULL,cut=15) {
n=length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,   y=y,cut=cut,control=list(fnscale=-1));
cov=matrix(rep(1,n),ncol=1);
} else {
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
}
beta=coef(a);
p=length(beta);
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)= (y<cut)*(-mu*ri+(1-ri)*(y-mu))+(y>=cut)*mu*dpois(cut-1,mu)/ci
uWT1=t(cov)%*%dU;
uWT2=-1+ri*(y<cut)/pi;
L11=uWT1%*%t(uWT1);
L12=uWT1%*%(uWT2)
L21=t(L12)
L22=t(uWT2)%*%(uWT2)
LL=rbind(cbind(L11,L12),cbind(L21,L22));
score<-sum(-1+ri*(y<cut)/pi)*sqrt(solve(LL)[p+1,p+1]);
return(score);
}
snew<- function(y,status,x=NULL,cut=15) {
n=length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,   y=y,cut=cut,control=list(fnscale=-1));
cov=matrix(rep(1,n),ncol=1);
} else {
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
}
beta=coef(ex);
p=length(beta);
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)=(y<cut)*(y-mu)+(y>=cut)*mu*dpois(cut-1,mu)/ci;
uWT1=ri-pi;
uWT2=t(cov)%*%dU;
A11=-n;
A12=t(uWT1)%*%t(uWT2);
A21=matrix(rep(0,p),ncol=1);
A22=uWT2%*%t(uWT2);
AA=rbind(cbind(A11,-A12),cbind(A21,-A22));
A=AA/n;
B11=t(uWT1)%*%uWT1;
B12=t(uWT1)%*%t(uWT2);
B22=uWT2%*%t(uWT2);
B21=t(B12);
BB=rbind(cbind(B11,B12),cbind(B21,B22));
B=BB/n;
TT=solve(A)%*%B%*%t(solve(A));
snew<-(sqrt(n)*mean(ri-pi))/sqrt((TT)[1,1]);
return(snew);
}
type1error_data_func(mu=0.5,aa=NULL,bb=1.45,beta2=1,ns=500,nsim=200,cut=4,method=NULL)
library(stats4)
library(splines)
library(VGAM)
loglikelihood  <-function(theta, y, x=NULL,cut=15){
if (is.null(x)){
xmatrix=matrix(1,nrow=length(y),ncol=1);
}else  {xmatrix=cbind(1,x);}
rho=theta[1];
beta=theta[-1];
pred=exp(xmatrix %*% beta);
like=(y<cut)*((y==0)*log((rho+(1-rho)*exp(-pred)))+(y>0)*log((1-rho)*dpois(y,pred)))+
(y>=cut)*log((1-rho)*ppois(cut-1,pred,lower.tail = F))
llike = sum(like)
return(llike);
}
likelihoodp<-function(theta,y,x=NULL,cut=15){
if (is.null(x)){
xmatrix=matrix(1,nrow=length(y),ncol=1);
}else  {xmatrix=cbind(1,x);}
beta=theta   # 修改：需要截距
pred=exp(xmatrix %*% beta);
rho=0;
like=(y<cut)*((y==0)*log((rho+(1-rho)*exp(-pred)))+(y>0)*log((1-rho)*dpois(y,pred)))+
(y>=cut)*log((1-rho)*ppois(cut-1,pred,lower.tail = F))
llike = sum(like)
return(llike);
}
# lp(coef(a),y,x,cut=4)
wald_lr<-function(y, x=NULL,cut=15){
test<-NULL;
n<-length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
zz0<-optim(coef(a), likelihoodp,hessian=T,y=y,cut=cut,control=list(fnscale=-1));
zz<-optim( c(0, zz0$par), loglikelihood,hessian=T,y=y,cut=cut,control=list(fnscale=-1));
}else {
a <- glm(y~x,family="poisson")
zz0<-optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
zz<-optim( c(0, zz0$par), loglikelihood,hessian=T, y=y,x=x,cut=cut,control=list(fnscale=-1));
}
aa<-zz$par;
test$conv = zz$convergence;
test$wrhop = zz$par[1];
if(det(zz$hessian)!=0){
OI<-solve(-zz$hessian,tol = 1e-40);
se<-sqrt(diag(OI));
test$wald <- as.numeric(aa[1]/se[1]);
test$lr <- as.numeric(2*zz$value-2*zz0$value);
}
return(test);
}
#
x = runif(200);yy = rzipois(200,exp(0.5-x), pstr0 = 0.5)
cut=4
y = pmin(cut, yy)
wald_lr(y,x=x,cut=cut)
score<- function(y,x=NULL,cut=15) {
n=length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,   y=y,cut=cut,control=list(fnscale=-1));
cov=matrix(rep(1,n),ncol=1);
} else {
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
}
beta=coef(a);
p=length(beta);
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)= (y<cut)*(-mu*ri+(1-ri)*(y-mu))+(y>=cut)*mu*dpois(cut-1,mu)/ci
uWT1=t(cov)%*%dU;
uWT2=-1+ri*(y<cut)/pi;
L11=uWT1%*%t(uWT1);
L12=uWT1%*%(uWT2)
L21=t(L12)
L22=t(uWT2)%*%(uWT2)
LL=rbind(cbind(L11,L12),cbind(L21,L22));
score<-sum(-1+ri*(y<cut)/pi)*sqrt(solve(LL)[p+1,p+1]);
return(score);
}
snew<- function(y,status,x=NULL,cut=15) {
n=length(y);
if (is.null(x)){
a <- glm(y~1,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,   y=y,cut=cut,control=list(fnscale=-1));
cov=matrix(rep(1,n),ncol=1);
} else {
a <- glm(y~x,family="poisson")
ex <- optim(  coef(a), likelihoodp,hessian=T,  y=y,x=x,cut=cut,control=list(fnscale=-1));
cov=cbind(1,x);
}
beta=coef(a);
p=length(beta);
mu= exp(cov %*% beta );
ci=ppois(cut,mu,lower.tail = F);
ri= (y==0);
pi=exp(-mu);
dU=matrix(rep(0, n^2), nrow=n);
diag(dU)=(y<cut)*(y-mu)+(y>=cut)*mu*dpois(cut-1,mu)/ci;
uWT1=ri-pi;
uWT2=t(cov)%*%dU;
A11=-n;
A12=t(uWT1)%*%t(uWT2);
A21=matrix(rep(0,p),ncol=1);
A22=uWT2%*%t(uWT2);
AA=rbind(cbind(A11,-A12),cbind(A21,-A22));
A=AA/n;
B11=t(uWT1)%*%uWT1;
B12=t(uWT1)%*%t(uWT2);
B22=uWT2%*%t(uWT2);
B21=t(B12);
BB=rbind(cbind(B11,B12),cbind(B21,B22));
B=BB/n;
TT=solve(A)%*%B%*%t(solve(A));
snew<-(sqrt(n)*mean(ri-pi))/sqrt((TT)[1,1]);
return(snew);
}
type1error_data_func(mu=0.5,aa=NULL,bb=1.45,beta2=1,ns=500,nsim=200,cut=4,method=NULL)
## 清空环境
rm(list=ls())
## 加载必要包
library(stats4)
library(splines)
library(VGAM)
## 加载程序
source("./czip_statistics_functions.R")
source("./czip_parplot_functions.R")
source("./czip_data_functions.R")
## 配置模拟设置
set.seed(2021)
cut=30;
nsim=200;
ns=c(50,100,200,500,1000);
lp=0.01*(seq(5,30,5));
mu=c(-0.5,0.5,1,1.5)
aa=c(-0.5,0.5,1,1.5)
bb=c(-0.5,0.5,1,1.5)
## CASE 1：无协变量
################################################################################
# 生成数据并保存
filename = "czip_power_case1"
datacase1 <- power_data_func(mu = mu,aa = NULL,bb = 1.45,lp = lp,ns = ns,nsim = nsim,cut = cut,method = NULL)
