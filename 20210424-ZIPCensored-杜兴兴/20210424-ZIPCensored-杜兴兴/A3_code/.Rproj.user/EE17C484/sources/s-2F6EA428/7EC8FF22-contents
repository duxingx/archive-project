
## 函数用来生成power的数据，返回的是list
power_data_func <- function(mu=NULL,aa=NULL,bb=1.45,beta2=1,lp,ns,nsim,cut=cut,method=NULL){
    start_time = Sys.time()
    if(is.null(mu)){mu_alpha=aa;
        }else {mu_alpha=mu;}
    
    waldp1=lrp1=scorep1=ssp1=array(dim=c(nsim, length(ns),length(lp), length(mu_alpha)));
    trasfor_pl = lp
    for(i in 1:length(mu_alpha)){ 
        for(j in 1:length(lp)){  
            for(k in 1:length(ns)){ 
                for(l in 1:nsim){  
                    
                    if(is.null(method)){yy = rzipois(ns[k],exp(mu_alpha[i]), pstr0 = lp[j])}
                    else if(method == "unif"){x = runif(ns[k]);yy = rzipois(ns[k],exp(mu_alpha[i]-bb*x), pstr0 = lp[j])}
                    else if(method =="norm"){x = rnorm(ns[k]);yy = rzipois(ns[k],exp(mu_alpha[i]-bb*x), pstr0 = lp[j])}
                    else if(method == "norm_logit"){
                        x = rnorm(ns[k]);trasfor_pl = exp(-lp[j]+beta2*x)/(1+(-lp[j]+beta2*x))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-bb*x), pstr0 = trasfor_pl)}
                    else if(method == "unif_logit"){
                        x = runif(ns[k]);trasfor_pl = exp(-lp[j]+beta2*x)/(1+(-lp[j]+beta2*x))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-bb*x), pstr0 = trasfor_pl)}
                    else if(method == "norm_sin"){
                        x = rnorm(ns[k]);trasfor_pl = lp[j]*abs((sin(4*pi*x)))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-bb*x), pstr0 = trasfor_pl)}
                    else if(method == "unif_sin"){
                        x = runif(ns[k]);trasfor_pl = lp[j]*abs((sin(4*pi*x)))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-bb*x), pstr0 = trasfor_pl)}
                    else if(method == "two_norm"){
                        x1 = rnorm(ns[k]);x2 = rnorm(ns[k]);
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = lp[j])}
                    else if(method == "two_unif"){
                        x1 = runif(ns[k]);x2 = runif(ns[k]);
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = lp[j])}
                    else if(method == "two_unifnorm"){
                        x1 = runif(ns[k]);x2 = rnorm(ns[k]);
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = lp[j])}
                    else if(method == "two_unif_logit"){
                        x1 = runif(ns[k]);x2 = runif(ns[k]);trasfor_pl = exp(-lp[j]+beta2*x)/(1+(-lp[j]+beta2*x))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = trasfor_pl)}
                    else if(method == "two_norm_logit"){
                        x1 = rnorm(ns[k]);x2 = rnorm(ns[k]);trasfor_pl = exp(-lp[j]+beta2*x)/(1+(-lp[j]+beta2*x))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = trasfor_pl)}
                    else if(method == "two_norm_sin"){
                        x1 = rnorm(ns[k]);x2 = rnorm(ns[k]);trasfor_pl = lp[j]*abs((sin(4*pi*x)))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = trasfor_pl)}
                    else if(method == "two_unif_sin"){
                        x1 = runif(ns[k]);x2 = runif(ns[k]);trasfor_pl = lp[j]*abs((sin(4*pi*x)))
                        yy = rzipois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)), pstr0 = trasfor_pl)}
                    else{return(print("请输入指定方法的字符串"))}
                    
                    y = pmin(cut, yy)
                    rcensored = (y >= cut)
                    status = ifelse(rcensored, 0, 1)
                 
                    try(waldp1[l,k,j,i] <- wald(y,status))
                    try(lrp1[l,k,j,i] <- LR(y,status))
                    try(scorep1[l,k,j,i] <- score(y,status))
                    try(ssp1[l,k,j,i] <- snew(y,status))
                    
                    print(paste("current simulation:",mu_alpha[i], lp[j], ns[k], l,
                                "  he:",round(ssp1[l,k,j,i],3),
                                "  score:",round(scorep1[l,k,j,i],3),
                                "  wald:",round(waldp1[l,k,j,i],3),
                                "  lr:",round(lrp1[l,k,j,i],3)));
                }
            }
        }
    }
    print(Sys.time() - start_time)
    return(list(wald=waldp1,lr=lrp1,score=scorep1,snew=ssp1,lp=trasfor_pl))
}




## 函数用来生成Type1Error的数据，返回的是list
type1error_data_func <- function(mu=NULL,aa=NULL,bb=1.45,beta2=1,ns,nsim,cut=cut,method=NULL){
    start_time = Sys.time()
    if(is.null(mu)){mu_alpha=aa;
    }else {mu_alpha=mu;}
    
    waldp1=lrp1=scorep1=ssp1=array(dim=c(nsim, length(ns),length(mu_alpha)));
    
    for(i in 1:length(mu_alpha)){ 
        for(k in 1:length(ns)){ 
            for(l in 1:nsim){  
                        
                if(is.null(method)){yy = rpois(ns[k],exp(mu_alpha[i]))}
                else if(method == "unif"){x = runif(ns[k]);yy = rpois(ns[k],exp(mu_alpha[i]-bb*x))}
                else if(method =="norm"){x = rnorm(ns[k]);yy = rpois(ns[k],exp(mu_alpha[i]-bb*x))}
                else if(method == "two_norm"){
                    x1 = rnorm(ns[k]);x2 = rnorm(ns[k]);
                    yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
                else if(method == "two_unif"){
                    x1 = runif(ns[k]);x2 = runif(ns[k]);
                    yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
                else if(method == "two_unifnorm"){
                    x1 = runif(ns[k]);x2 = rnorm(ns[k]);
                    yy = rpois(ns[k],exp(mu_alpha[i]-0.5*(x1+x2)))}
                else{return(print("请输入指定方法的字符串"))}
                
                y = pmin(cut, yy)
                rcensored = (y >= cut)
                status = ifelse(rcensored, 0, 1)

                try(waldp1[l,k,i] <- wald(y,status))
                try(lrp1[l,k,i] <- LR(y,status))
                try(scorep1[l,k,i] <- score(y,status))
                try(ssp1[l,k,i] <- snew(y,status))
                
                print(paste("current simulation:",mu_alpha[i],ns[k],l,
                            "  he:",round(ssp1[l,k,i],3),
                            "  score:",round(scorep1[l,k,i],3),
                            "  wald:",round(waldp1[l,k,i],3),
                            "  lr:",round(lrp1[l,k,i],3)));
            }
        }
    }
    print(Sys.time() - start_time)
    return(list(wald=waldp1,lr=lrp1,score=scorep1,snew=ssp1))
}

