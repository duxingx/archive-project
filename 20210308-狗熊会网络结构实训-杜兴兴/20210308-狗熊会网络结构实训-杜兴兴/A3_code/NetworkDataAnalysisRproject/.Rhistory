g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(1234)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(1234)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(1234)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(2020)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(2021)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(123456)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(654321)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(654321)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(1111)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
set.seed(1111)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g)
nodes <- V(g)[comm$membership == 39]
g.sub <- induced_subgraph(g,nodes)
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel
plot(g.sub,
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
knitr::opts_chunk$set(echo = TRUE)
comm <- multilevel.community(g) # 社区发现
# 清除工作环境
rm(list = ls())
# 加载必要包
library(igraph)
library(dplyr)
library(ggplot2)
deg <- degree(g)
data = read.csv("../A2_data/edge_core.csv")
# head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
data = read.csv("../A2_data/edge_core.csv")
# head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
deg <- degree(g)
hist(deg,xlab = "度",ylab = "频数",main="",col = "white")
df.deg <- as.data.frame(deg)
df.deg$name <- rownames(df.deg)
author <- read.csv("../A2_data/author.csv")
author.deg <- merge(author,df.deg,by = "name")
author.deg <- author.deg[order(author.deg$deg,decreasing = T),c(3,1,2)]
rownames(author.deg) <- 1:nrow(author.deg)
head(author.deg,n = 10)
bet <- betweenness(g,normalized = T)
df.bet <- as.data.frame(bet)
df.bet$name <- rownames(df.bet)
author.bet <- merge(df.bet,author,by = 'name')
author.bet <- author.bet[order(author.bet$bet,decreasing = T),c(2,1,3)]
rownames(author.bet) <- 1:nrow(author.bet)
head(author.bet,10)
comm <- multilevel.community(g)
len <- lengths(comm,use.names = F)
names(len) <- 1:length(len)
len
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 38]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan",
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
V(g.sub)
max(degree(g.sub))
author[which(author$name == name)
author[which(author$name == name)
author[which(author$name == name),"author"]
nodes <- V(g)[comm$membership == 20]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
author[which(author$name == name),"author"]
author[which(author$name == name),"author"]
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]
maxlabel
degree(g.sub)
sort(degree(g.sub),decreasing = T)[1]
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan" ,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
# degree(g.sub)*0.5
plot(g.sub,   # 绘图
vertex.size = 3,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
# degree(g.sub)*0.5
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
# degree(g.sub)*0.5
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
# degree(g.sub)*0.5
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
comm <- multilevel.community(g) # 社区发现
nodes <- V(g)[comm$membership == 39]  # 提取社区节点
g.sub <- induced_subgraph(g,nodes)   # 选择子网络
name <- names(which.max(degree(g.sub)))
maxlabel <- author[which(author$name == name),"author"]  # 匹配最大度的标签姓名
# V(g.sub)$label = ""
# V(g.sub)[max(degree(g.sub))]$label = maxlabel   # 设置标签
V(g.sub)[sort(degree(g.sub),decreasing = T)[1]]$label = maxlabel   # 设置标签
# degree(g.sub)*0.5
plot(g.sub,   # 绘图
vertex.size = degree(g.sub)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
print(paste("子网络的密度为：",graph.density(g)))
knitr::opts_chunk$set(echo = TRUE)
# 清除工作环境
rm(list = ls())
# 加载必要包
library(igraph)
library(dplyr)
library(plyr)
library(ggplot2)
```{r}
data = read.table("../A2_data/final/CollegeMsg.txt",col.names = c("SRC","DST","UNIXTS") )
head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
data = read.table("../A2_data/final/CollegeMsg.txt",col.names = c("SRC","DST","UNIXTS") )
head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
plot(g,   # 绘图
vertex.size = degree(g)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05,
layout = layout.fruchterman.reingold)
plot(g,   # 绘图
vertex.size = degree(g)*0.5,vertex.color = "cyan" ,
vertex.label.dist=0.05)
degree(g)
init_degree <10
init_degree <- degree(g)
init_degree < 10
flag <- (init_degree < 10)
flag
delete.vertices(g,flag)
?delete.vertices
init_degree = degree(g)
flag = (init_degree < 10)
new_g = g
while (degree(new_g) <10) {
if (flag) {
new_g = delete.vertices(g,flag)
}else{
new_g = g
}
}
print(paste("网络的节点数为：",length(V(g))))
data = read.table("../A2_data/final/CollegeMsg.txt",col.names = c("SRC","DST","UNIXTS") )
head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
data = read.table("../A2_data/final/CollegeMsg.txt",col.names = c("SRC","DST","UNIXTS") )
# head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
# init_degree = degree(g)
# flag = (init_degree < 10)
# g = g
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
while (degree(g) <10) {
flag = degree(g)
if (flag) {
g = delete.vertices(g,flag)
}else{
g = g
}
}
print(paste("删除之后网络的节点数为：",length(V(g))))
rm(list = ls())
# 加载必要包
library(igraph)
library(dplyr)
library(plyr)
library(ggplot2)
data = read.table("../A2_data/final/CollegeMsg.txt",col.names = c("SRC","DST","UNIXTS") )
# head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
rm(list = ls())
# 加载必要包
library(igraph)
library(dplyr)
library(plyr)
library(ggplot2)
data = read.table("../A2_data/final/CollegeMsg.txt",col.names = c("SRC","DST","UNIXTS") )
# head(data)
g <- graph_from_data_frame(data,directed = F)
print(paste("网络的节点数为：",length(V(g))))
print(paste("网络的边数为：",length(E(g))))
print(paste("网络的密度为：",graph.density(g)))
getwd()
