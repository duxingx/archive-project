#! /bin/sh
#
# chkconfig: 2345 98 2
# description: $APP_NAME
#
# Application
APP_NAME="DMAgentService"
APP_LONG_NAME="DMAgentService"
WAIT_AFTER_STARTUP=10

DMAGENG_CMD=com.dameng.agent.DMAgentRunner
DMAGENG_CMD_EXT=java

installedStatus=0 # 0: not installed
                  # 1: installed (default)
                  # 2: installed with systemd
                  # 3: installed with upstart
                  # 4: installed with SRC (complete: both lssrc & lsitab returned a record)
                  # 5: installed with SRC (partial: lssrc xor lsitab returned a record)

				  # Resolve the os
installedWith=""

# Resolve the location of the 'ps' command
PS_BIN="/usr/ucb/ps"
if [ ! -x "$PS_BIN" ]
then
	PS_BIN="/usr/bin/ps"
	if [ ! -x "$PS_BIN" ]
	then
		PS_BIN="/bin/ps"
		if [ ! -x "$PS_BIN" ]
		then
			echo "Unable to locate "ps"."
			echo "Please report this message along with the location of the command on your system."
			exit 1
		fi
	fi
fi

TR_BIN="/usr/bin/tr"
if [ ! -x "$TR_BIN" ]
then
    TR_BIN="/bin/tr"
    if [ ! -x "$TR_BIN" ]
    then
        echo "Unable to locate "tr"."
        echo "Please report this message along with the location of the command on your system."
        exit 1
    fi
fi

DIST_OS=`uname -s | $TR_BIN "[A-Z]" "[a-z]" | $TR_BIN -d ' '`
case "$DIST_OS" in
    'sunos')
        DIST_OS="solaris"
        ;;
    'hp-ux' | 'hp-ux64')
        # HP-UX needs the XPG4 version of ps (for -o args)
        DIST_OS="hpux"
        UNIX95=""
        export UNIX95   
        ;;
    'darwin')
        DIST_OS="macosx"
        ;;
    'unix_sv')
        DIST_OS="unixware"
        ;;
    'os/390')
        DIST_OS="zos"
        ;;
esac

# default location for the service file
SYSTEMD_SERVICE_FILE="/usr/lib/systemd/system/$APP_NAME.service"

# Required for HP-UX Startup
if [ `uname -s` = "HP-UX" -o `uname -s` = "HP-UX64" ] ; then
        PATH=$PATH:/usr/bin
fi

# Get the fully qualified path to the script
case $0 in
    /*)
        SCRIPT="$0"
        ;;
    *)
        PWD=`pwd`
        SCRIPT="$PWD/$0"
        ;;
esac

# Resolve the true real path without any sym links.
CHANGED=true
while [ "X$CHANGED" != "X" ]
do
    # Change spaces to ":" so the tokens can be parsed.
    SAFESCRIPT=`echo $SCRIPT | sed -e 's; ;:;g'`
    # Get the real path to this script, resolving any symbolic links
    TOKENS=`echo $SAFESCRIPT | sed -e 's;/; ;g'`
    REALPATH=
    for C in $TOKENS; do
        # Change any ":" in the token back to a space.
        C=`echo $C | sed -e 's;:; ;g'`
        REALPATH="$REALPATH/$C"
        # If REALPATH is a sym link, resolve it.  Loop for nested links.
        while [ -h "$REALPATH" ] ; do
            LS="`ls -ld "$REALPATH"`"
            LINK="`expr "$LS" : '.*-> \(.*\)$'`"
            if expr "$LINK" : '/.*' > /dev/null; then
                # LINK is absolute.
                REALPATH="$LINK"
            else
                # LINK is relative.
                REALPATH="`dirname "$REALPATH"`""/$LINK"
            fi
        done
    done

    if [ "$REALPATH" = "$SCRIPT" ]
    then
        CHANGED=""
    else
        SCRIPT="$REALPATH"
    fi
done

# Get the location of the script.
REALDIR=`dirname "$REALPATH"`
# Normalize the path
REALDIR=`cd "${REALDIR}"; pwd`
DM_AGENT_HOME=`cd "${REALDIR}/../../"; pwd`

LOG_FILE="$REALDIR/../log/$APP_NAME.log"
PIDFILE="$REALDIR/dmagent.pid"
pid=""

# Test Echo
ECHOTEST=`echo -n "x"`
if [ "$ECHOTEST" = "x" ]
then
    ECHOOPT="-n "
    ECHOOPTC=""
else
    ECHOOPT=""
    ECHOOPTC="\c"
fi

getpid() {
    pid=""
    if [ -f "$PIDFILE" ]
    then
        if [ -r "$PIDFILE" ]
        then
            pid=`cat "$PIDFILE"`
            if [ "X$pid" != "X" ]
            then
                
				# It is possible that 'a' process with the pid exists but that it is not the
				#  correct process.  This can happen in a number of cases, but the most
				#  common is during system startup after an unclean shutdown.
				# The ps statement below looks for the specific wrapper command running as
				#  the pid.  If it is not found then the pid file is considered to be stale.
				case "$DIST_OS" in
					'freebsd')
						pidtest=`$PS_BIN -p $pid -o args | tail -1`
						if [ "X$pidtest" = "XCOMMAND" ]
						then 
							pidtest=""
						fi
						;;
					'solaris')
						if [ -f "/usr/bin/pargs" ]
						then
							pidtest=`pargs $pid | fgrep "$DMAGENG_CMD" | grep -F "$DMAGENG_CMD_EXT"  | tail -1`
						else
							case "$PS_BIN" in
								'/usr/ucb/ps')
									pidtest=`$PS_BIN -auxww $pid | fgrep "$DMAGENG_CMD" | grep -F "$DMAGENG_CMD_EXT" | tail -1`
									;;
								'/usr/bin/ps')
									TRUNCATED_CMD=`$PS_BIN -o comm -p $pid | tail -1`
									COUNT=`echo $TRUNCATED_CMD | wc -m`
									COUNT=`echo ${COUNT}`
									COUNT=`expr $COUNT - 1`
									TRUNCATED_CMD=`echo $DMAGENG_CMD | cut -c1-$COUNT`
									pidtest=`$PS_BIN -o comm -p $pid | fgrep "$TRUNCATED_CMD" | grep -F "$DMAGENG_CMD_EXT" | tail -1`
									;;
								'/bin/ps')
									TRUNCATED_CMD=`$PS_BIN -o comm -p $pid | tail -1`
									COUNT=`echo $TRUNCATED_CMD | wc -m`
									COUNT=`echo ${COUNT}`
									COUNT=`expr $COUNT - 1`
									TRUNCATED_CMD=`echo $DMAGENG_CMD | cut -c1-$COUNT`
									pidtest=`$PS_BIN -o comm -p $pid | fgrep "$TRUNCATED_CMD" | grep -F "$DMAGENG_CMD_EXT" | tail -1`
									;;
								*)
									echo "Unsupported ps command $PS_BIN"
									exit 1
									;;
							esac
						fi
						;;
					'hpux')
						pidtest=`$PS_BIN -p $pid -x -o args | grep -F "$DMAGENG_CMD" | grep -F "$DMAGENG_CMD_EXT" | tail -1`
						;;
					'zos')
						TRUNCATED_CMD=`$PS_BIN -p $pid -o args | tail -1`
						COUNT=`echo $TRUNCATED_CMD | wc -m`
						COUNT=`echo ${COUNT}`
						COUNT=`expr $COUNT - 1`
						TRUNCATED_CMD=`echo $DMAGENG_CMD | cut -c1-$COUNT`
						pidtest=`$PS_BIN -p $pid -o args | grep -F "$TRUNCATED_CMD" | grep -F "$DMAGENG_CMD_EXT" | tail -1`
						;;
					*)
						pidtest=`$PS_BIN -p $pid -o args | grep -F "$DMAGENG_CMD" | grep -F "$DMAGENG_CMD_EXT" | tail -1`
						;;
				esac
               

                if [ "X$pidtest" = "X" ]
                then
                    # This is a stale pid file.
                    rm -f "$PIDFILE"
                    echo "Removed stale pid file: $PIDFILE"
                    pid=""
                fi
            fi
        else
            echo "Cannot read $PIDFILE."
            exit 1
        fi
    fi
}

startwait() {
    i=0
    while [ $i -lt $WAIT_AFTER_STARTUP ]
    do
        sleep 1
        echo $ECHOOPT".$ECHOOPTC"
        i=`expr $i + 1`
    done
    if [ $WAIT_AFTER_STARTUP -gt 0 ]
    then
        getpid
        if [ "X$pid" = "X" ]
        then
            echo " WARNING: $APP_LONG_NAME may have failed to start."
            exit 1
        else
            echo " running: PID:$pid"
        fi
    else 
        echo ""
    fi
}

startit() {
    echo "Starting $APP_LONG_NAME..."
    getpid
    if [ "X$pid" = "X" ]
    then
        # The string passed to eval must handles spaces in paths correctly.
        COMMAND_LINE="$DM_AGENT_HOME/DMAgentRunner.sh -noconsole > /dev/null 2>&1 &"
        eval $COMMAND_LINE
    else
        echo "$APP_LONG_NAME is already running."
        exit 1
    fi
    
    startwait
}

testpid() {
    case "$DIST_OS" in
     'solaris')
        case "$PS_BIN" in
        '/usr/ucb/ps')
            pid=`$PS_BIN  $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
            ;;
        '/usr/bin/ps')
            pid=`$PS_BIN -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
            ;;
        '/bin/ps')
            pid=`$PS_BIN -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
            ;;
        *)
            echo "Unsupported ps command $PS_BIN"
            exit 1
            ;;
        esac
        ;;
    *)
        pid=`$PS_BIN -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1` 2>/dev/null
        ;;
    esac
    if [ "X$pid" = "X" ]
    then
        pid=""
    fi
}

stopit() {
 
    echo "Stopping $APP_LONG_NAME..."
    getpid
    if [ "X$pid" = "X" ]
    then
		echo "$APP_LONG_NAME was not running."
        if [ "X$1" = "X1" ]
        then
            exit 1
        fi
    else

		# Running so try to stop it.
		kill $pid
		if [ $? -ne 0 ]
		then
			# An explanation for the failure should have been given
			echo "Unable to stop $APP_LONG_NAME."
			exit 1
		fi
       
        # We can not predict how long it will take for the wrapper to
        #  actually stop as it depends on settings in wrapper.conf.
        #  Loop until it does.
        savepid=$pid
        CNT=0
        TOTCNT=0
        while [ "X$pid" != "X" ]
        do
            # Show a waiting message every 5 seconds.
            if [ "$CNT" -lt "5" ]
            then
                CNT=`expr $CNT + 1`
            else
                echo "Waiting for $APP_LONG_NAME to exit..."
                CNT=0
            fi
            TOTCNT=`expr $TOTCNT + 1`

            sleep 1

            # Check if the process is still running.
            testpid
            
            if [ "X$pid" = "X" ]
            then
                getpid
                
                if [ "X$pid" != "X" ]
                then
                    # Another process is running.
                    if [ "$pid" = "$savepid" ]
                    then
                        # This should never happen, unless the PID was recycled?
                        echo "Failed to stop $APP_LONG_NAME."
                        exit 1
                    else
                        echo "The content of $PIDFILE has changed."
                        echo "Another instance of the Wrapper might have started in the meantime."
                        
                        # Exit now. Any further actions might compromise the running instance.
                        exit 1
                    fi
                fi
            fi
        done

        echo "Stopped $APP_LONG_NAME."
    fi
}

checkInstalled() {
    if [ "$DIST_OS" = "solaris" ] ; then
        if [ -f "/etc/init.d/$APP_NAME" -o -L "/etc/init.d/$APP_NAME" ] ; then
            installedStatus=1
        else
            installedStatus=0
        fi
    elif [ "$DIST_OS" = "linux" ] ; then
        if [ -f /etc/redhat-release -o -f /etc/redhat_version -o -f /etc/fedora-release ] ; then
            if [ -f "/etc/init.d/$APP_NAME" -o -L "/etc/init.d/$APP_NAME" ] ; then
                installedStatus=1
                installedWith="init.d"
            elif [ -f "${SYSTEMD_SERVICE_FILE}" ] ; then
                installedStatus=2
                installedWith="systemd"
            elif [ -f "/etc/init/${APP_NAME}.conf" ] ; then
                installedStatus=3
                installedWith="upstart"
            else
                installedStatus=0
            fi
        elif [ -f /etc/SuSE-release ] ; then
            if [ -f "/etc/init.d/$APP_NAME" -o -L "/etc/init.d/$APP_NAME" ] ; then
                installedStatus=1
                installedWith="init.d"
            elif [ -f "${SYSTEMD_SERVICE_FILE}" ] ; then
                installedStatus=2
                installedWith="systemd"
            else
                installedStatus=0
            fi
        elif [ -f /etc/lsb-release -o -f /etc/debian_version -o -f /etc/debian_release ] ; then
            if [ -f "/etc/init.d/$APP_NAME" -o -L "/etc/init.d/$APP_NAME" ] ; then
                installedStatus=1
                installedWith="init.d"
            elif [ -f "${SYSTEMD_SERVICE_FILE}" ] ; then
                installedStatus=2
                installedWith="systemd"
            elif [ -f "/etc/init/${APP_NAME}.conf" ] ; then
                installedStatus=3
                installedWith="upstart"
            else
                installedStatus=0
            fi
        else
            if [ -f "/etc/init.d/$APP_NAME" -o -L "/etc/init.d/$APP_NAME" ] ; then
                installedStatus=1
            else
                installedStatus=0
            fi
        fi
    elif [ "$DIST_OS" = "hpux" ] ; then
        if [ -f "/sbin/init.d/$APP_NAME" -o -L "/sbin/init.d/$APP_NAME" ] ; then
            installedStatus=1
        else
            installedStatus=0
        fi
    elif [ "$DIST_OS" = "aix" ] ; then
        validateAppNameLength
        if [ -f "/etc/rc.d/init.d/$APP_NAME" -o -L "/etc/rc.d/init.d/$APP_NAME" ] ; then
            installedStatus=1
            installedWith="rc.d"
        elif [ -n "`/usr/sbin/lsitab $APP_NAME`" -a -n "`/usr/bin/lssrc -S -s $APP_NAME`" ] ; then
            installedStatus=4
            installedWith="SRC"
        elif [ -n "`/usr/sbin/lsitab $APP_NAME`" -o -n "`/usr/bin/lssrc -S -s $APP_NAME`" ] ; then
            installedStatus=5
            installedWith="SRC"
        else
            installedStatus=0
        fi
    elif [ "$DIST_OS" = "freebsd" ] ; then
        if [ -f "/etc/rc.d/$APP_NAME" -o -L "/etc/rc.d/$APP_NAME" ] ; then
            installedStatus=1
        else
            installedStatus=0
        fi
    elif [ "$DIST_OS" = "zos" ] ; then
        if [ -f /etc/rc.bak ] ; then
            installedStatus=1
        else
            installedStatus=0
        fi
    fi
}

status() {
    checkInstalled
    getpid
    if [ "X$pid" = "X" ]
    then
        if [ $installedStatus -eq 0 ] ; then
            echo "$APP_LONG_NAME (not installed) is not running."
        elif [ "X$installedWith" = "X" ] ; then
            echo "$APP_LONG_NAME (installed) is not running."
        else
            echo "$APP_LONG_NAME (installed with $installedWith) is not running."
        fi
        exit 1
    else
		if [ $installedStatus -eq 0 ] ; then
			echo "$APP_LONG_NAME (not installed) is running: PID:$pid"
		elif [ "X$installedWith" = "X" ] ; then
			echo "$APP_LONG_NAME (installed) is running: PID:$pid"
		else
			echo "$APP_LONG_NAME (installed with $installedWith) is running: PID:$pid"
		fi
		exit 0
    fi
}

mustBeRootOrExit() {
    if [ `id | sed 's/^uid=//;s/(.*$//'` != "0" ] ; then       
        echo "Must be root to perform this action."
        exit 1
    fi
}

systemdInstall() {
    echo " Installing the $APP_LONG_NAME daemon using systemd..."
    if [ -f "${REALDIR}/${APP_NAME}.service" ] ; then 
        echo " a custom service file ${APP_NAME}.service found"
        cp "${REALDIR}/${APP_NAME}.service" "${SYSTEMD_SERVICE_FILE}"
    else
        echo " creating default service file..."
        echo "[Unit]"                            > "${SYSTEMD_SERVICE_FILE}"
        echo "Description=${APP_LONG_NAME}"     >> "${SYSTEMD_SERVICE_FILE}"
        echo "After=syslog.target network.target remote-fs.target nss-lookup.target"              >> "${SYSTEMD_SERVICE_FILE}"
        echo ""                                 >> "${SYSTEMD_SERVICE_FILE}"
        echo "[Service]"                        >> "${SYSTEMD_SERVICE_FILE}"
        echo "Type=forking"                     >> "${SYSTEMD_SERVICE_FILE}"
        echo "ExecStart=${REALPATH} start sysd" >> "${SYSTEMD_SERVICE_FILE}"
        echo "ExecStop=${REALPATH} stop sysd"   >> "${SYSTEMD_SERVICE_FILE}"
        echo ""                                 >> "${SYSTEMD_SERVICE_FILE}"
        echo "[Install]"                        >> "${SYSTEMD_SERVICE_FILE}"
        echo "WantedBy=multi-user.target"       >> "${SYSTEMD_SERVICE_FILE}"

    fi
    systemctl daemon-reload
    systemctl enable "${APP_NAME}"
}

systemdRemove() {
    stopit
    echo " Removing $APP_LONG_NAME daemon from systemd..."
    systemctl disable $APP_NAME
    rm "${SYSTEMD_SERVICE_FILE}"
    systemctl daemon-reload
}

installdaemon() {
    mustBeRootOrExit
    
    checkInstalled
    APP_NAME_LOWER=`echo "$APP_NAME" | $TR_BIN "[A-Z]" "[a-z]"`
    if [ "$DIST_OS" = "solaris" ] ; then
        echo "Detected Solaris:"
        if [ $installedStatus -gt 0 ] ; then
            echo " The $APP_LONG_NAME daemon is already installed."
        else
            echo " Installing the $APP_LONG_NAME daemon.."
            ln -s "$REALPATH" "/etc/init.d/$APP_NAME"
            for i in `ls "/etc/rc3.d/K"??"$APP_NAME_LOWER" "/etc/rc3.d/S"??"$APP_NAME_LOWER" 2>/dev/null` ; do
                echo " Removing unexpected file before proceeding: $i"
                rm -f $i
            done
            ln -s "/etc/init.d/$APP_NAME" "/etc/rc3.d/K${APP_RUN_LEVEL_K}$APP_NAME_LOWER"
            ln -s "/etc/init.d/$APP_NAME" "/etc/rc3.d/S${APP_RUN_LEVEL_S}$APP_NAME_LOWER"
        fi
    elif [ "$DIST_OS" = "linux" ] ; then
        if [ -f /etc/redhat-release -o -f /etc/redhat_version -o -f /etc/fedora-release ] ; then
            echo "Detected RHEL or Fedora:"
            if [ $installedStatus -gt 0 ] ; then
                echo " The $APP_LONG_NAME daemon is already installed with $installedWith."
            elif [ -d "/etc/systemd" ] ; then
                    systemdInstall
            else
				echo " Installing the $APP_LONG_NAME daemon.."
				ln -s "$REALPATH" "/etc/init.d/$APP_NAME"
				/sbin/chkconfig --add "$APP_NAME"
				/sbin/chkconfig "$APP_NAME" on
            fi
        elif [ -f /etc/SuSE-release ] ; then
            echo "Detected SuSE or SLES:"
            if [ $installedStatus -gt 0 ] ; then
                echo " The $APP_LONG_NAME daemon is already installed with $installedWith."
            elif [ -d "/etc/systemd" ] ; then
                    systemdInstall
            else
                echo " Installing the $APP_LONG_NAME daemon.."
                ln -s "$REALPATH" "/etc/init.d/$APP_NAME"
                insserv "/etc/init.d/$APP_NAME"
            fi
        elif [ -f /etc/lsb-release -o -f /etc/debian_version -o -f /etc/debian_release ] ; then
            echo "Detected Ubuntu or Debian:"
            if [ $installedStatus -gt 0 ] ; then
                echo " The $APP_LONG_NAME daemon is already installed with $installedWith."
            else
                if [ -d "/etc/systemd" ] ; then
                    systemdInstall
                else 
                    echo " Installing the $APP_LONG_NAME daemon using init.d.."
                    ln -s "$REALPATH" "/etc/init.d/$APP_NAME"
                    update-rc.d "$APP_NAME" defaults
                fi
            fi
        else
            echo "Detected Linux:"
            if [ $installedStatus -gt 0 ] ; then
                echo " The $APP_LONG_NAME daemon is already installed."
            else
                echo " Installing the $APP_LONG_NAME daemon.."
                ln -s "$REALPATH" /etc/init.d/$APP_NAME
                for i in `ls "/etc/rc3.d/K"??"$APP_NAME_LOWER" "/etc/rc5.d/K"??"$APP_NAME_LOWER" "/etc/rc3.d/S"??"$APP_NAME_LOWER" "/etc/rc5.d/S"??"$APP_NAME_LOWER" 2>/dev/null` ; do
                    echo " Removing unexpected file before proceeding: $i"
                    rm -f $i
                done
                ln -s "/etc/init.d/$APP_NAME" "/etc/rc3.d/K${APP_RUN_LEVEL_K}$APP_NAME_LOWER"
                ln -s "/etc/init.d/$APP_NAME" "/etc/rc3.d/S${APP_RUN_LEVEL_S}$APP_NAME_LOWER"
                ln -s "/etc/init.d/$APP_NAME" "/etc/rc5.d/S${APP_RUN_LEVEL_S}$APP_NAME_LOWER"
                ln -s "/etc/init.d/$APP_NAME" "/etc/rc5.d/K${APP_RUN_LEVEL_K}$APP_NAME_LOWER"
            fi
        fi
    elif [ "$DIST_OS" = "hpux" ] ; then
        echo "Detected HP-UX:"
        if [ $installedStatus -gt 0 ] ; then
            echo " The $APP_LONG_NAME daemon is already installed."
        else
            echo " Installing the $APP_LONG_NAME daemon.."
            ln -s "$REALPATH" "/sbin/init.d/$APP_NAME"
            for i in `ls "/sbin/rc3.d/K"??"$APP_NAME_LOWER" "/sbin/rc3.d/S"??"$APP_NAME_LOWER" 2>/dev/null` ; do
                echo " Removing unexpected file before proceeding: $i"
                rm -f $i
            done
            ln -s "/sbin/init.d/$APP_NAME" "/sbin/rc3.d/K${APP_RUN_LEVEL_K}$APP_NAME_LOWER"
            ln -s "/sbin/init.d/$APP_NAME" "/sbin/rc3.d/S${APP_RUN_LEVEL_S}$APP_NAME_LOWER"
        fi
    elif [ "$DIST_OS" = "aix" ] ; then
        echo "Detected AIX:"
        validateAppNameLength
        if [ $installedStatus -eq 1 -o $installedStatus -eq 4 ] ; then
            echo " The $APP_LONG_NAME daemon is already installed with $installedWith."
        else
            echo " Installing the $APP_LONG_NAME daemon.."
            if [ -n "`/usr/sbin/lsitab install_assist`" ] ; then 
                echo " The task /usr/sbin/install_assist was found in the inittab, this might cause problems for all subsequent tasks to launch at this process is known to block the init task. Please make sure this task is not needed anymore and remove/deactivate it."
            fi
            for i in `ls "/etc/rc.d/rc2.d/K"??"$APP_NAME_LOWER" "/etc/rc.d/rc2.d/S"??"$APP_NAME_LOWER" 2>/dev/null` ; do
                echo " Removing unexpected file before proceeding: $i"
                rm -f $i
            done
            srcInstall
        fi
    elif [ "$DIST_OS" = "freebsd" ] ; then
        echo "Detected FreeBSD:"
        if [ $installedStatus -gt 0 ] ; then
            echo " The $APP_LONG_NAME daemon is already installed."
        else
            echo " Installing the $APP_LONG_NAME daemon.."
            sed -i .bak "/${APP_NAME}_enable=\"YES\"/d" /etc/rc.conf
            if [ -f "${REALDIR}/${APP_NAME}.install" ] ; then
                ln -s "${REALDIR}/${APP_NAME}.install" "/etc/rc.d/$APP_NAME"
            else
                echo '#!/bin/sh'                    > "/etc/rc.d/$APP_NAME"
                echo "#"                           >> "/etc/rc.d/$APP_NAME"
                echo "# PROVIDE: $APP_NAME"        >> "/etc/rc.d/$APP_NAME"
                echo "# REQUIRE: NETWORKING"       >> "/etc/rc.d/$APP_NAME"
                echo "# KEYWORD: shutdown"         >> "/etc/rc.d/$APP_NAME"
                echo ". /etc/rc.subr"              >> "/etc/rc.d/$APP_NAME"
                echo "name=\"$APP_NAME\""          >> "/etc/rc.d/$APP_NAME"
                echo "rcvar=\`set_rcvar\`"         >> "/etc/rc.d/$APP_NAME"
                echo "command=\"${REALPATH}\""     >> "/etc/rc.d/$APP_NAME"
                echo 'start_cmd="${name}_start"'   >> "/etc/rc.d/$APP_NAME"
                echo 'load_rc_config $name'        >> "/etc/rc.d/$APP_NAME"
                echo 'status_cmd="${name}_status"' >> "/etc/rc.d/$APP_NAME"
                echo 'stop_cmd="${name}_stop"'     >> "/etc/rc.d/$APP_NAME"
                echo "${APP_NAME}_status() {"      >> "/etc/rc.d/$APP_NAME"
                echo '${command} status'           >> "/etc/rc.d/$APP_NAME"
                echo '}'                           >> "/etc/rc.d/$APP_NAME"
                echo "${APP_NAME}_stop() {"        >> "/etc/rc.d/$APP_NAME"
                echo '${command} stop'             >> "/etc/rc.d/$APP_NAME"
                echo '}'                           >> "/etc/rc.d/$APP_NAME"
                echo "${APP_NAME}_start() {"       >> "/etc/rc.d/$APP_NAME"
                echo '${command} start'            >> "/etc/rc.d/$APP_NAME"
                echo '}'                           >> "/etc/rc.d/$APP_NAME"
                echo 'run_rc_command "$1"'         >> "/etc/rc.d/$APP_NAME"
            fi
            echo "${APP_NAME}_enable=\"YES\"" >> /etc/rc.conf
            chmod 555 "/etc/rc.d/$APP_NAME"
        fi
    elif [ "$DIST_OS" = "zos" ] ; then
        echo "Detected z/OS:"
        if [ $installedStatus -gt 0 ] ; then
            echo " The $APP_LONG_NAME daemon is already installed."
        else
            echo " Installing the $APP_LONG_NAME daemon.."
            cp /etc/rc /etc/rc.bak
            sed  "s:echo /etc/rc script executed, \`date\`::g" /etc/rc.bak > /etc/rc
            echo "_BPX_JOBNAME='${APP_NAME}' \"${REALDIR}/${APP_NAME}\" start" >>/etc/rc
            echo '/etc/rc script executed, `date`' >>/etc/rc
        fi
    else
        echo "Install not currently supported for $DIST_OS"
        exit 1
    fi
    
    if [ $installedStatus -gt 0 -a "$COMMAND" != 'installstart' ] ; then
        exit 1
    fi
}
removedaemon() {
    mustBeRootOrExit
    
    checkInstalled
    APP_NAME_LOWER=`echo "$APP_NAME" | $TR_BIN "[A-Z]" "[a-z]"`
    if [ "$DIST_OS" = "solaris" ] ; then
        echo "Detected Solaris:"
        if [ $installedStatus -eq 1 ] ; then
            stopit "0"
            echo " Removing $APP_LONG_NAME daemon..."
            for i in `ls "/etc/rc3.d/K"??"$APP_NAME_LOWER" "/etc/rc3.d/S"??"$APP_NAME_LOWER" "/etc/init.d/$APP_NAME" 2>/dev/null` ; do
                rm -f $i
            done
        else
            echo " The $APP_LONG_NAME daemon is not currently installed."
            exit 1
        fi
    elif [ "$DIST_OS" = "linux" ] ; then
        if [ -f /etc/redhat-release -o -f /etc/redhat_version -o -f /etc/fedora-release ] ; then
            echo "Detected RHEL or Fedora:"
            if [ $installedStatus -eq 1 ] ; then
                stopit "0"
                echo " Removing $APP_LONG_NAME daemon..."
                /sbin/chkconfig "$APP_NAME" off
                /sbin/chkconfig --del "$APP_NAME"
                rm -f "/etc/init.d/$APP_NAME"
            elif [ $installedStatus -eq 2 ] ; then
                systemdRemove
            elif [ $installedStatus -eq 3 ] ; then
                stopit "0"
                echo " Removing $APP_LONG_NAME daemon from upstart..."
                rm "/etc/init/${APP_NAME}.conf"
            else
                echo " The $APP_LONG_NAME daemon is not currently installed."
                exit 1
            fi
        elif [ -f /etc/SuSE-release ] ; then
            echo "Detected SuSE or SLES:"
            if [ $installedStatus -eq 1 ] ; then
                stopit "0"
                echo " Removing $APP_LONG_NAME daemon..."
                insserv -r "/etc/init.d/$APP_NAME"
                rm -f "/etc/init.d/$APP_NAME"
            elif [ $installedStatus -eq 2 ] ; then
                systemdRemove
            else
                echo " The $APP_LONG_NAME daemon is not currently installed."
                exit 1
            fi
        elif [ -f /etc/lsb-release -o -f /etc/debian_version -o -f /etc/debian_release ] ; then
            echo "Detected Ubuntu or Debian:"
            if [ $installedStatus -eq 1 ] ; then
                stopit "0"
                echo " Removing $APP_LONG_NAME daemon from init.d..."
                update-rc.d -f "$APP_NAME" remove
                rm -f "/etc/init.d/$APP_NAME"
            elif [ $installedStatus -eq 2 ] ; then
                systemdRemove
            elif [ $installedStatus -eq 3 ] ; then
                stopit "0"
                echo " Removing $APP_LONG_NAME daemon from upstart..."
                rm "/etc/init/${APP_NAME}.conf"
            else
                echo " The $APP_LONG_NAME daemon is not currently installed."
                exit 1
            fi
        else
            echo "Detected Linux:"
            if [ $installedStatus -eq 1 ] ; then
                stopit "0"
                echo " Removing $APP_LONG_NAME daemon..."
                for i in `ls "/etc/rc3.d/K"??"$APP_NAME_LOWER" "/etc/rc5.d/K"??"$APP_NAME_LOWER" "/etc/rc3.d/S"??"$APP_NAME_LOWER" "/etc/rc5.d/S"??"$APP_NAME_LOWER" "/etc/init.d/$APP_NAME" 2>/dev/null` ; do
                    rm -f $i
                done
            else
                echo " The $APP_LONG_NAME daemon is not currently installed."
                exit 1
            fi
        fi
    elif [ "$DIST_OS" = "hpux" ] ; then
        echo "Detected HP-UX:"
        if [ $installedStatus -eq 1 ] ; then
            stopit "0"
            echo " Removing $APP_LONG_NAME daemon..."
            for i in `ls "/sbin/rc3.d/K"??"$APP_NAME_LOWER" "/sbin/rc3.d/S"??"$APP_NAME_LOWER" "/sbin/init.d/$APP_NAME" 2>/dev/null` ; do
                rm -f $i
            done
        else
            echo " The $APP_LONG_NAME daemon is not currently installed."
            exit 1
        fi
    elif [ "$DIST_OS" = "aix" ] ; then
        echo "Detected AIX:"
        validateAppNameLength
        if [ $installedStatus -gt 0 ] ; then
            stopit "0"
            echo " Removing $APP_LONG_NAME daemon..."
            if [ $installedStatus -eq 1 ] ; then
                for i in `ls "/etc/rc.d/rc2.d/K"??"$APP_NAME_LOWER" "/etc/rc.d/rc2.d/S"??"$APP_NAME_LOWER" "/etc/rc.d/init.d/$APP_NAME" 2>/dev/null` ; do
                    rm -f $i
                done
            else
                /usr/sbin/rmitab $APP_NAME
                /usr/bin/rmssys -s $APP_NAME
            fi
        else
            echo " The $APP_LONG_NAME daemon is not currently installed."
            exit 1
        fi
    elif [ "$DIST_OS" = "freebsd" ] ; then
        echo "Detected FreeBSD:"
        if [ -f "/etc/rc.d/$APP_NAME" -o -L "/etc/rc.d/$APP_NAME" ] ; then
            stopit "0"
            echo " Removing $APP_LONG_NAME daemon..."
            for i in "/etc/rc.d/$APP_NAME"
            do
                rm -f $i
            done
            sed -i .bak "/${APP_NAME}_enable=\"YES\"/d" /etc/rc.conf
        else
            echo " The $APP_LONG_NAME daemon is not currently installed."
            exit 1
        fi
    elif [ "$DIST_OS" = "macosx" ] ; then
        echo "Detected Mac OSX:"
        if [ -f "/Library/LaunchDaemons/${APP_PLIST}" -o -L "/Library/LaunchDaemons/${APP_PLIST}" ] ; then
            stopit "0"
            echo " Removing $APP_LONG_NAME daemon..."
            # Make sure the plist is installed
            LOADED_PLIST=`launchctl list | grep ${APP_PLIST_BASE}`
            if [ "X${LOADED_PLIST}" != "X" ] ; then
                launchctl unload "/Library/LaunchDaemons/${APP_PLIST}"
            fi
            rm -f "/Library/LaunchDaemons/${APP_PLIST}"
        else
            echo " The $APP_LONG_NAME daemon is not currently installed."
            exit 1
        fi
    elif [ "$DIST_OS" = "zos" ] ; then
        echo "Detected z/OS:"
        if [ -f /etc/rc.bak ] ; then
            stopit "0"
            echo " Removing $APP_LONG_NAME daemon..."
            cp /etc/rc /etc/rc.bak
            sed  "s/_BPX_JOBNAME=\'APP_NAME\'.*//g" /etc/rc.bak > /etc/rc
            rm /etc/rc.bak
        else
            echo " The $APP_LONG_NAME daemon is not currently installed."
            exit 1
        fi
    else
        echo "Remove not currently supported for $DIST_OS"
        exit 1
    fi
}

showUsage() {
	echo "Usage: $0 [ start | stop | restart | status | install | installstart | remove ]"
    exit 1
}

case "$1" in
	'start')
		startit
		;;

	'stop')
		stopit
		;;

	'restart')
		stopit
		startit
		;;

	'status')
		status
		;;

	'install')
		installdaemon
		;;

	'installstart')
		installdaemon
		startit
		;;

	'remove')
		removedaemon
		;;

	*)
		showUsage
		;;
esac

exit $?